{% extends "layouts/app.jinja2" %}

{% block head %}
<link rel="stylesheet" href="{{ req.static_url("meshinfo:static/leaflet/leaflet.css") }}">
{% endblock %}

{% block root %}
  <div class="container is-fluid m-0 p-0">
    <div id="map" style="height: 92vh;"></div>
  </div>
{% endblock %}

{% block javascript %}
<script src="{{ req.static_url("meshinfo:static/leaflet/leaflet.js") }}"></script>
<script src="{{ req.static_url("meshinfo:static/js/leaflet.polylineoffset.js") }}"></script>
<script type="text/javascript">
  let map = L.map('map', {
    center: [{{ latitude }}, {{ longitude }}],
    zoom: {{ zoom }}
  });

  L.tileLayer('{{ tile_url }}', {
    attribution: '{{ tile_attribution|replace("'", '"')|safe }}',
    maxZoom: {{ max_zoom }},
  }).addTo(map);

  let node_icons = {
  {% for band, icon_url in node_icons.items() -%}
    '{{ band.value }}': L.icon({iconUrl: '{{ icon_url }}', iconSize: [20, 20], iconAnchor: [10, 10], popupAnchor: [0, -10]}),
  {% endfor -%}
  }

  function nodeFeature(feature, layer) {
    layer.bindTooltip('<b>' + feature.properties.name + '</b>');
    layer.bindPopup((layer) => {
      var el = document.createElement('div');
      fetch(feature.properties.previewUrl)
        .then(response => response.text())
        .then(data => el.innerHTML = data);
      return el;
    }, {minWidth: 350, maxWidth: 500});
  }

  function linkFeature(feature, layer) {
    layer.bindPopup((layer) => {
      var el = document.createElement('div');
      fetch(feature.properties.previewUrl)
        .then(response => response.text())
        .then(data => el.innerHTML = data);
      return el;
    }, {minWidth: 375, maxWidth: 600});
  }

  // TODO: different layers per band (like MeshMap)
  let nodeLayer = L.geoJSON([], {
      onEachFeature: nodeFeature,
      pointToLayer: function (feature, latlng) {
        return L.marker(latlng, {
          icon: node_icons[feature.properties.band] ?? node_icons['Unknown']
        });
      }
    }).addTo(map);

  // TODO: different layers per link type (like MeshMap)
  let linkLayer = L.geoJSON([], {
    onEachFeature: linkFeature,
    style: function(feature) {
      return {
        color: feature.properties.color,
        offset: feature.properties.offset,
        weight: feature.properties.weight,
        opacity: feature.properties.opacity,
      }
    }
  }).addTo(map);

  async function getGeoJson() {
    let mapData = await fetch('{{ req.route_url("map-data") }}').then(response => response.json()).then(data => data);
    nodeLayer.addData(mapData.nodes);
    linkLayer.addData(mapData.links);
  }

  getGeoJson();

  let scale = L.control.scale();
  scale.addTo(map);

  let legend = L.control({position: 'topright'});
  legend.onAdd = function (map) {
    let div = L.DomUtil.create('div', 'm-0 p-0');
    div.innerHTML = `{% include "components/map-legend.jinja2" %}`;
    return div;
  };
  legend.addTo(map);

</script>
{% endblock %}
