{% extends "layouts/app.jinja2" %}

{% block head %}
<link rel="stylesheet" href="{{ req.static_url("meshinfo:static/leaflet/leaflet.css") }}">
{% endblock %}

{% block root %}
  <div class="container is-fluid m-0 p-0">
    <div id="map" style="height: 92vh;"></div>
  </div>
{% endblock %}

{% block javascript %}
<script src="{{ req.static_url("meshinfo:static/leaflet/leaflet.js") }}"></script>
<script src="{{ req.static_url("meshinfo:static/js/leaflet.polylineoffset.js") }}"></script>
<script type="text/javascript">
  let map = L.map('map', {
    center: [{{ latitude }}, {{ longitude }}],
    zoom: {{ zoom }}
  });

  L.tileLayer('{{ tile_url }}', {
    attribution: '{{ tile_attribution|replace("'", '"')|safe }}',
    maxZoom: {{ max_zoom }},
  }).addTo(map);

  function nodeFeature(feature, layer) {
    layer.bindTooltip('<b>' + feature.properties.name + '</b>');
    layer.bindPopup((layer) => {
      var el = document.createElement('div');
      fetch(feature.properties.previewUrl)
        .then(response => response.text())
        .then(data => el.innerHTML = data);
      return el;
    }, {minWidth: 350, maxWidth: 500});
  }

  function linkFeature(feature, layer) {
    layer.bindPopup((layer) => {
      var el = document.createElement('div');
      fetch(feature.properties.previewUrl)
        .then(response => response.text())
        .then(data => el.innerHTML = data);
      return el;
    }, {minWidth: 375, maxWidth: 600});
  }

  let layerControl = L.control.layers(null, null, {position: 'topleft', collapsed: true}).addTo(map);
  // these collections aren't necessary, but does it hurt to keep them around?
  let nodeLayers = {};
  let linkLayers = {};

  fetch('{{ req.route_url("map-data") }}')
    .then(response => {
      if (!response.ok){
        throw new Error(response.statusText);
      }
      return response.json();
    })
    .then(mapData => {
      for (const nodeLayer of mapData.nodeLayers) {
        let mapLayer = L.geoJSON(nodeLayer.geoJSON, {
          onEachFeature: nodeFeature,
          pointToLayer: function (feature, latlng) {
            return L.marker(latlng, {
              icon: L.icon({iconUrl: nodeLayer.icon, iconSize: [20, 20], iconAnchor: [10, 10], popupAnchor: [0, -10]}),
            });
          }
        }).addTo(map);
        layerControl.addOverlay(mapLayer, nodeLayer.description);
        nodeLayers[nodeLayer.variable] = mapLayer;
      }
      for (const linkLayer of mapData.linkLayers) {
        let mapLayer = L.geoJSON(linkLayer.geoJSON, {
          onEachFeature: linkFeature,
          style: function(feature) {
            return {
              color: feature.properties.color,
              offset: feature.properties.offset,
              weight: feature.properties.weight,
              opacity: feature.properties.opacity,
            }
          }
        });
        if (linkLayer.active) {
          mapLayer.addTo(map);
        }
        layerControl.addOverlay(mapLayer, linkLayer.description);
        linkLayers[linkLayer.variable] = mapLayer;
      }
    })
    .catch(error => {
      console.error('Failed to load map data!', error);
      alert('Failed to load map data! ' + error);
    });

  let scale = L.control.scale();
  scale.addTo(map);

  let legend = L.control({position: 'topright'});
  legend.onAdd = function (map) {
    let div = L.DomUtil.create('div', 'm-0 p-0');
    div.innerHTML = `{% include "components/map-legend.jinja2" %}`;
    return div;
  };
  legend.addTo(map);

</script>
{% endblock %}
